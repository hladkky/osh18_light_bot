# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from google.protobuf import empty_pb2 as google_dot_protobuf_dot_empty__pb2
from proto.v1.company import company_endpoints_pb2 as v1_dot_company_dot_company__endpoints__pb2
from proto.v1.company import company_pb2 as v1_dot_company_dot_company__pb2
from proto.v1.image import image_pb2 as v1_dot_image_dot_image__pb2


class CompanyServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.createCompany = channel.unary_unary(
                '/CompanyService/createCompany',
                request_serializer=v1_dot_company_dot_company__pb2.Company.SerializeToString,
                response_deserializer=v1_dot_company_dot_company__pb2.Company.FromString,
                )
        self.getUserCompanies = channel.unary_unary(
                '/CompanyService/getUserCompanies',
                request_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
                response_deserializer=v1_dot_company_dot_company__endpoints__pb2.UserCompaniesResponse.FromString,
                )
        self.getCompany = channel.unary_unary(
                '/CompanyService/getCompany',
                request_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
                response_deserializer=v1_dot_company_dot_company__pb2.Company.FromString,
                )
        self.updateCompany = channel.unary_unary(
                '/CompanyService/updateCompany',
                request_serializer=v1_dot_company_dot_company__pb2.Company.SerializeToString,
                response_deserializer=v1_dot_company_dot_company__pb2.Company.FromString,
                )
        self.streamUserLightweightCompanies = channel.unary_stream(
                '/CompanyService/streamUserLightweightCompanies',
                request_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
                response_deserializer=v1_dot_company_dot_company__endpoints__pb2.UserLightweightCompany.FromString,
                )
        self.uploadCompanyLogo = channel.stream_unary(
                '/CompanyService/uploadCompanyLogo',
                request_serializer=v1_dot_image_dot_image__pb2.ImageChunk.SerializeToString,
                response_deserializer=v1_dot_image_dot_image__pb2.ImageMetadataResponse.FromString,
                )


class CompanyServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def createCompany(self, request, context):
        """
        Creates new company.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getUserCompanies(self, request, context):
        """
        Provides a list of companies that user has access to.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getCompany(self, request, context):
        """
        Returns a current company info.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def updateCompany(self, request, context):
        """
        Updates the company and returns updated company info.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def streamUserLightweightCompanies(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def uploadCompanyLogo(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_CompanyServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'createCompany': grpc.unary_unary_rpc_method_handler(
                    servicer.createCompany,
                    request_deserializer=v1_dot_company_dot_company__pb2.Company.FromString,
                    response_serializer=v1_dot_company_dot_company__pb2.Company.SerializeToString,
            ),
            'getUserCompanies': grpc.unary_unary_rpc_method_handler(
                    servicer.getUserCompanies,
                    request_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                    response_serializer=v1_dot_company_dot_company__endpoints__pb2.UserCompaniesResponse.SerializeToString,
            ),
            'getCompany': grpc.unary_unary_rpc_method_handler(
                    servicer.getCompany,
                    request_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                    response_serializer=v1_dot_company_dot_company__pb2.Company.SerializeToString,
            ),
            'updateCompany': grpc.unary_unary_rpc_method_handler(
                    servicer.updateCompany,
                    request_deserializer=v1_dot_company_dot_company__pb2.Company.FromString,
                    response_serializer=v1_dot_company_dot_company__pb2.Company.SerializeToString,
            ),
            'streamUserLightweightCompanies': grpc.unary_stream_rpc_method_handler(
                    servicer.streamUserLightweightCompanies,
                    request_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                    response_serializer=v1_dot_company_dot_company__endpoints__pb2.UserLightweightCompany.SerializeToString,
            ),
            'uploadCompanyLogo': grpc.stream_unary_rpc_method_handler(
                    servicer.uploadCompanyLogo,
                    request_deserializer=v1_dot_image_dot_image__pb2.ImageChunk.FromString,
                    response_serializer=v1_dot_image_dot_image__pb2.ImageMetadataResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'CompanyService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class CompanyService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def createCompany(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/CompanyService/createCompany',
            v1_dot_company_dot_company__pb2.Company.SerializeToString,
            v1_dot_company_dot_company__pb2.Company.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def getUserCompanies(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/CompanyService/getUserCompanies',
            google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            v1_dot_company_dot_company__endpoints__pb2.UserCompaniesResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def getCompany(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/CompanyService/getCompany',
            google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            v1_dot_company_dot_company__pb2.Company.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def updateCompany(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/CompanyService/updateCompany',
            v1_dot_company_dot_company__pb2.Company.SerializeToString,
            v1_dot_company_dot_company__pb2.Company.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def streamUserLightweightCompanies(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/CompanyService/streamUserLightweightCompanies',
            google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            v1_dot_company_dot_company__endpoints__pb2.UserLightweightCompany.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def uploadCompanyLogo(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_unary(request_iterator, target, '/CompanyService/uploadCompanyLogo',
            v1_dot_image_dot_image__pb2.ImageChunk.SerializeToString,
            v1_dot_image_dot_image__pb2.ImageMetadataResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
