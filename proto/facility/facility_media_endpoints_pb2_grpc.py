# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from google.protobuf import empty_pb2 as google_dot_protobuf_dot_empty__pb2
from proto.facility import facility_media_endpoints_pb2 as v1_dot_facility_dot_facility__media__endpoints__pb2
from proto.facility import facility_media_pb2 as v1_dot_facility_dot_facility__media__pb2
from proto.image import image_pb2 as v1_dot_image_dot_image__pb2


class FacilityMediaServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.streamMedia = channel.unary_stream(
                '/FacilityMediaService/streamMedia',
                request_serializer=v1_dot_facility_dot_facility__media__endpoints__pb2.GetFacilityMediaRequest.SerializeToString,
                response_deserializer=v1_dot_facility_dot_facility__media__pb2.FacilityMedia.FromString,
                )
        self.createMedia = channel.unary_unary(
                '/FacilityMediaService/createMedia',
                request_serializer=v1_dot_facility_dot_facility__media__pb2.FacilityMedia.SerializeToString,
                response_deserializer=v1_dot_facility_dot_facility__media__pb2.FacilityMedia.FromString,
                )
        self.updateMedia = channel.unary_unary(
                '/FacilityMediaService/updateMedia',
                request_serializer=v1_dot_facility_dot_facility__media__pb2.FacilityMedia.SerializeToString,
                response_deserializer=v1_dot_facility_dot_facility__media__pb2.FacilityMedia.FromString,
                )
        self.deleteMedia = channel.unary_unary(
                '/FacilityMediaService/deleteMedia',
                request_serializer=v1_dot_facility_dot_facility__media__endpoints__pb2.DeleteFacilityMediaRequest.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                )
        self.uploadMedia = channel.stream_unary(
                '/FacilityMediaService/uploadMedia',
                request_serializer=v1_dot_image_dot_image__pb2.ImageChunk.SerializeToString,
                response_deserializer=v1_dot_image_dot_image__pb2.ImageMetadataResponse.FromString,
                )
        self.getFacilityMediaImage = channel.unary_unary(
                '/FacilityMediaService/getFacilityMediaImage',
                request_serializer=v1_dot_facility_dot_facility__media__endpoints__pb2.GetFacilityMediaImageRequest.SerializeToString,
                response_deserializer=v1_dot_image_dot_image__pb2.ImageMetadataResponse.FromString,
                )


class FacilityMediaServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def streamMedia(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def createMedia(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def updateMedia(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def deleteMedia(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def uploadMedia(self, request_iterator, context):
        """
        Important: "facility" parameter should be passed into metadata map inside ImageChunk.LastClunk
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getFacilityMediaImage(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_FacilityMediaServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'streamMedia': grpc.unary_stream_rpc_method_handler(
                    servicer.streamMedia,
                    request_deserializer=v1_dot_facility_dot_facility__media__endpoints__pb2.GetFacilityMediaRequest.FromString,
                    response_serializer=v1_dot_facility_dot_facility__media__pb2.FacilityMedia.SerializeToString,
            ),
            'createMedia': grpc.unary_unary_rpc_method_handler(
                    servicer.createMedia,
                    request_deserializer=v1_dot_facility_dot_facility__media__pb2.FacilityMedia.FromString,
                    response_serializer=v1_dot_facility_dot_facility__media__pb2.FacilityMedia.SerializeToString,
            ),
            'updateMedia': grpc.unary_unary_rpc_method_handler(
                    servicer.updateMedia,
                    request_deserializer=v1_dot_facility_dot_facility__media__pb2.FacilityMedia.FromString,
                    response_serializer=v1_dot_facility_dot_facility__media__pb2.FacilityMedia.SerializeToString,
            ),
            'deleteMedia': grpc.unary_unary_rpc_method_handler(
                    servicer.deleteMedia,
                    request_deserializer=v1_dot_facility_dot_facility__media__endpoints__pb2.DeleteFacilityMediaRequest.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
            'uploadMedia': grpc.stream_unary_rpc_method_handler(
                    servicer.uploadMedia,
                    request_deserializer=v1_dot_image_dot_image__pb2.ImageChunk.FromString,
                    response_serializer=v1_dot_image_dot_image__pb2.ImageMetadataResponse.SerializeToString,
            ),
            'getFacilityMediaImage': grpc.unary_unary_rpc_method_handler(
                    servicer.getFacilityMediaImage,
                    request_deserializer=v1_dot_facility_dot_facility__media__endpoints__pb2.GetFacilityMediaImageRequest.FromString,
                    response_serializer=v1_dot_image_dot_image__pb2.ImageMetadataResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'FacilityMediaService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class FacilityMediaService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def streamMedia(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/FacilityMediaService/streamMedia',
            v1_dot_facility_dot_facility__media__endpoints__pb2.GetFacilityMediaRequest.SerializeToString,
            v1_dot_facility_dot_facility__media__pb2.FacilityMedia.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def createMedia(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/FacilityMediaService/createMedia',
            v1_dot_facility_dot_facility__media__pb2.FacilityMedia.SerializeToString,
            v1_dot_facility_dot_facility__media__pb2.FacilityMedia.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def updateMedia(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/FacilityMediaService/updateMedia',
            v1_dot_facility_dot_facility__media__pb2.FacilityMedia.SerializeToString,
            v1_dot_facility_dot_facility__media__pb2.FacilityMedia.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def deleteMedia(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/FacilityMediaService/deleteMedia',
            v1_dot_facility_dot_facility__media__endpoints__pb2.DeleteFacilityMediaRequest.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def uploadMedia(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_unary(request_iterator, target, '/FacilityMediaService/uploadMedia',
            v1_dot_image_dot_image__pb2.ImageChunk.SerializeToString,
            v1_dot_image_dot_image__pb2.ImageMetadataResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def getFacilityMediaImage(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/FacilityMediaService/getFacilityMediaImage',
            v1_dot_facility_dot_facility__media__endpoints__pb2.GetFacilityMediaImageRequest.SerializeToString,
            v1_dot_image_dot_image__pb2.ImageMetadataResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
